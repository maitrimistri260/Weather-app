{"version":3,"sources":["comonents/weather-app/weathercard.js","comonents/weather-app/temp.js","reportWebVitals.js","index.js"],"names":["Weathercard","temp","humidity","pressure","weathermood","name","speed","country","sunset","React","useState","weatherState","setWeatherState","useEffect","date","Date","timeStr","getHours","getMinutes","className","toLocaleString","Temp","searchValue","setSearchValue","tempInfo","setTempInfo","getWeatherInfo","a","url","fetch","res","json","data","main","weather","wind","sys","console","log","type","placeholder","autoFocus","id","value","onChange","e","target","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.139c405c.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\n\r\nconst Weathercard = ({\r\n    temp,\r\n    humidity,\r\n    pressure,\r\n    weathermood,\r\n    name,\r\n    speed,\r\n    country,\r\n    sunset\r\n}) => {\r\n    const [weatherState, setWeatherState] = React.useState(\"\");\r\n\r\n    useEffect(() => {\r\n        if (weathermood) {\r\n            switch (weathermood) {\r\n                case \"Clouds\":\r\n                    setWeatherState(\"wi-day-cloudy\");\r\n                    break;\r\n                case \"Haze\":\r\n                    setWeatherState(\"wi-fog\");\r\n                    break;\r\n                case \"Clear\":\r\n                    setWeatherState(\"wi-day-sunny\");\r\n                    break;\r\n                case \"Mist\":\r\n                    setWeatherState(\"Wi-dust\");\r\n                    break;\r\n\r\n                default: setWeatherState(\"wi-day-sunny\");\r\n                    break;\r\n            }\r\n        }\r\n    }, [weathermood]);\r\n\r\n    let sec = sunset;\r\n    let date = new Date(sec * 1000);\r\n    let timeStr = `${date.getHours()}:${date.getMinutes()}`;\r\n    return (\r\n        <>\r\n            <div>\r\n                <article className=\"widget\">\r\n                    <div className=\"weatherIcon\">\r\n                        <i className={`wi ${weatherState}`}></i>\r\n                    </div>\r\n                    <div className=\"weatherInfo\">\r\n                        <div className=\"temperature\">\r\n                            <span>{temp}&deg;</span>\r\n                        </div>\r\n                        <div className=\"description\">\r\n                            <div className=\"weatherCondition\">{weathermood}</div>\r\n                            <div className=\"place\">{name}, {country}</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"date\">\r\n                        {new Date().toLocaleString()}\r\n                    </div>\r\n\r\n                    {/* 4 column section below */}\r\n                    <div className=\"extra-temp\">\r\n                        <div className=\"temp-info-minmax\">\r\n                            <div className=\"two-sided-section\">\r\n                                <p>\r\n                                    <i className={\"wi wi-sunset\"}></i>\r\n                                </p>\r\n                                <p className=\"extra-info-leftside\">\r\n                                    {timeStr}<br />\r\n                                    Sunset\r\n                                </p>\r\n                            </div>\r\n\r\n                            <div className=\"two-sided-section\">\r\n                                <p>\r\n                                    <i className={\"wi wi-humidity\"}></i>\r\n                                </p>\r\n                                <p className=\"extra-info-leftside\">\r\n                                    {humidity} <br />\r\n                                    Humidity\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"weather-extra-info\">\r\n                            <div className=\"two-sided-section\">\r\n                                <p>\r\n                                    <i className={\"wi wi-rain\"}></i>\r\n                                </p>\r\n                                <p className=\"extra-info-leftside\">\r\n                                    {pressure} <br />\r\n                                    Pressure\r\n                                </p>\r\n                            </div>\r\n\r\n                            <div className=\"two-sided-section\">\r\n                                <p>\r\n                                    <i className={\"wi wi-strong-wind\"}></i>\r\n                                </p>\r\n                                <p className=\"extra-info-leftside\">\r\n                                    {speed} <br />\r\n                                    Speed\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </article>\r\n\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Weathercard;\r\n\r\n","/* api.openweathermap.org/data/2.5/weather?q=mumbai&appid=a894e5bbda4895f37250622c693be985 */\r\n\r\nimport React , {useState, useEffect} from 'react';\r\nimport './style.css';\r\nimport WeatherCard from './weathercard';\r\n\r\nconst Temp = () => {\r\n\r\n    const [searchValue, setSearchValue] = useState(\"mumbai\");\r\n    const [tempInfo, setTempInfo] = useState();\r\n    \r\n    const getWeatherInfo = async() => {\r\n        try {\r\n            let url=`https://api.openweathermap.org/data/2.5/weather?q=${searchValue}&units=metric&appid=143160f674daca78a6acc9934fe36e7c`;\r\n\r\n            \r\n\r\n            let res = await fetch(url);\r\n            let data = await res.json();\r\n            const {temp, humidity, pressure} = data.main;\r\n            const {main: weathermood } = data.weather[0];\r\n            const { name } = data;\r\n            const { speed } = data.wind;\r\n            const { country, sunset } = data.sys;\r\n\r\n            const myNewWeatherInfo = {\r\n                temp, \r\n                humidity, \r\n                pressure, \r\n                weathermood, \r\n                name, \r\n                speed, \r\n                country, \r\n                sunset\r\n            };\r\n\r\n            setTempInfo(myNewWeatherInfo);\r\n\r\n            // console.log(data);\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        getWeatherInfo();\r\n        \r\n    },);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"wrap\">\r\n            \r\n                <div className=\"search\">\r\n                    <input type=\"search\"\r\n                        placeholder=\"search...\"\r\n                        autoFocus\r\n                        id=\"search\"\r\n                        className=\"searchTerm\"\r\n                        value={searchValue}\r\n                        onChange={(e) => setSearchValue(e.target.value)}\r\n                    />\r\n\r\n                    <button className=\"searchButton\" type=\"button\" onClick={getWeatherInfo}>\r\n                        Search\r\n                    </button>\r\n\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n            {/* {temp card} */}\r\n            <WeatherCard {...tempInfo}/>\r\n            \r\n        </>\r\n    );\r\n\r\n}\r\nexport default Temp;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Temp from './comonents/weather-app/temp';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Temp/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}